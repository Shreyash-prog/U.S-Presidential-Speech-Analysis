{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMZkxG5k9E42AHjEQcATuVH"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"ksWtj66zIcKn","executionInfo":{"status":"ok","timestamp":1712855347762,"user_tz":240,"elapsed":748,"user":{"displayName":"Shreyash Kalal","userId":"03232915697487647046"}}},"outputs":[],"source":["import pandas as pd\n","import re\n","from google.colab import drive\n","from google.colab import files"]},{"cell_type":"code","source":["# Mount Google Drive\n","drive.mount('/content/drive')\n","\n","# Path to the Excel file in your Google Drive\n","file_path = '/content/drive/My Drive/datasetspeech.xlsx'\n","\n","# Read Excel file into DataFrame\n","df = pd.read_excel(file_path)\n","\n","# Function to extract sentences containing a target word from an input string\n","def extract_sentences_with_word(input_string, target_word):\n","    # Define the regex pattern to match sentences containing the target word\n","    pattern = r'[^.!?]*\\b' + re.escape(target_word.lower()) + r'\\b[^.!?]*[.!?]'\n","\n","    # Find all matches of the pattern in the input string\n","    matches = re.findall(pattern, input_string, re.IGNORECASE)\n","\n","    # Filter out sentences that contain only escape sequences\n","    filtered_matches = [sentence.strip() for sentence in matches if re.search(r'\\w', sentence.strip())]\n","\n","    # Return the list of sentences containing the target word\n","    return filtered_matches\n","\n","# Function to create DataFrames containing sentences with specific target words\n","def create_word_table():\n","    # List of target words to search for in the input string\n","    target_word_list = ['bureaucrat', 'bureaucrats', 'bureaucracy', 'bureaucracies', 'washington', 'expert', 'experts', 'civil', 'servant', 'servants', 'law', 'laws']\n","\n","    # Initialize empty lists to store sentences and corresponding speech numbers\n","    bureaucrat_lst, bureaucracy_lst, washington_lst, expert_lst, civil_lst, servant_lst, law_lst, speech_b_num, speech_by_num, speech_w_num, speech_e_num, speech_c_num, speech_s_num, speech_l_num = [], [], [], [], [], [], [], [], [], [], [], [], [], []\n","\n","    # Loop through each speech content in the DataFrame\n","    for num in range(len(df['Speech Content'])):\n","        # Get the speech content as an input string\n","        input_str = df['Speech Content'][num]\n","\n","        # Check if the input string is a valid string\n","        if type(input_str) == str:\n","            # Loop through each target word in the target word list\n","            for word in target_word_list:\n","                # Check if the target word is in the input string\n","                if word in input_str:\n","                    # Extract sentences containing the target word\n","                    sentences_with_word = extract_sentences_with_word(input_str, word)\n","                    # Append the sentences to the corresponding list based on the target word\n","                    if word == 'bureaucrat' or word == 'bureaucrats':\n","                        bureaucrat_lst += sentences_with_word\n","                        speech_b_num += [(num+1)] * len(sentences_with_word)\n","                    elif word == 'bureaucracy' or word == 'bureaucracies':\n","                        bureaucracy_lst += sentences_with_word\n","                        speech_by_num += [(num+1)] * len(sentences_with_word)\n","                    elif word == 'washington':\n","                        washington_lst += sentences_with_word\n","                        speech_w_num += [(num+1)] * len(sentences_with_word)\n","                    elif word == 'expert' or word == 'experts':\n","                        expert_lst += sentences_with_word\n","                        speech_e_num += [(num+1)] * len(sentences_with_word)\n","                    elif word == 'civil':\n","                        civil_lst += sentences_with_word\n","                        speech_c_num += [(num+1)] * len(sentences_with_word)\n","                    elif word == 'servant' or word == 'servants':\n","                        servant_lst += sentences_with_word\n","                        speech_s_num += [(num+1)] * len(sentences_with_word)\n","                    elif word == 'law' or word == 'laws':\n","                        law_lst += sentences_with_word\n","                        speech_l_num += [(num+1)] * len(sentences_with_word)\n","                    else:\n","                        pass\n","                else:\n","                    pass\n","        else:\n","            pass\n","\n","    # Create DataFrames for each target word with corresponding speech numbers and sentences\n","    df_bureaucrat = pd.DataFrame({'Speech Number': speech_b_num, 'Sentences with Bureaucrat': bureaucrat_lst})\n","    df_bureaucracy = pd.DataFrame({'Speech Number': speech_by_num, 'Sentences with Bureaucracy': bureaucracy_lst})\n","    df_washington = pd.DataFrame({'Speech Number': speech_w_num, 'Sentences with Washington': washington_lst})\n","    df_expert = pd.DataFrame({'Speech Number': speech_e_num, 'Sentences with Expert': expert_lst})\n","    df_civil = pd.DataFrame({'Speech Number': speech_c_num, 'Sentences with Civil': civil_lst})\n","    df_servant = pd.DataFrame({'Speech Number': speech_s_num, 'Sentences with Servant': servant_lst})\n","    df_law = pd.DataFrame({'Speech Number': speech_l_num, 'Sentences with Law': law_lst})\n","\n","    # Return the DataFrames for each target word\n","    return df_bureaucrat, df_bureaucracy, df_washington, df_expert, df_civil, df_servant, df_law\n","\n","# Call the function to create the DataFrames\n","df_bureaucrat, df_bureaucracy, df_washington, df_expert, df_civil, df_servant, df_law = create_word_table()\n","\n","## Uncomment the below code to download df into your drive\n","# df_bureaucrat.to_csv('bureaucrat_table.csv', index=False)\n","# df_bureaucracy.to_csv('bureaucracy_table.csv', index=False)\n","# df_washington.to_csv('washington_table.csv', index=False)\n","# df_expert.to_csv('expert_table.csv', index=False)\n","# df_civil.to_csv('civil_table.csv', index=False)\n","# df_servant.to_csv('servant_table.csv', index=False)\n","# df_law.to_csv('law_table.csv', index=False)\n","\n","## Uncomment the below code to download df into your local storage\n","# files.download('/content/drive/My Drive/bureaucrat_table.csv')\n","# files.download('/content/drive/My Drive/bureaucracy_table.csv')\n","# files.download('/content/drive/My Drive/washington_table.csv')\n","# files.download('/content/drive/My Drive/expert_table.csv')\n","# files.download('/content/drive/My Drive/civil_table.csv')\n","# files.download('/content/drive/My Drive/servant_table.csv')\n","# files.download('/content/drive/My Drive/law_table.csv')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":367},"id":"tqn4d0yvIoEy","executionInfo":{"status":"error","timestamp":1712855905356,"user_tz":240,"elapsed":7635,"user":{"displayName":"Shreyash Kalal","userId":"03232915697487647046"}},"outputId":"4ebde39d-2498-46ad-8e6c-5efd2e376f39"},"execution_count":5,"outputs":[{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-437a8c982553>\u001b[0m in \u001b[0;36m<cell line: 87>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     85\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     86\u001b[0m \u001b[0;31m# Call the function to create the DataFrames\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 87\u001b[0;31m \u001b[0mdf_bureaucrat\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdf_bureaucracy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdf_washington\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdf_expert\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdf_civil\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdf_servant\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdf_law\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcreate_word_table\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     88\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     89\u001b[0m \u001b[0;31m## Uncomment the below code to download df into your drive\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-5-437a8c982553>\u001b[0m in \u001b[0;36mcreate_word_table\u001b[0;34m()\u001b[0m\n\u001b[1;32m     42\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mword\u001b[0m \u001b[0;32min\u001b[0m \u001b[0minput_str\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m                     \u001b[0;31m# Extract sentences containing the target word\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 44\u001b[0;31m                     \u001b[0msentences_with_word\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mextract_sentences_with_word\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_str\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mword\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     45\u001b[0m                     \u001b[0;31m# Append the sentences to the corresponding list based on the target word\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     46\u001b[0m                     \u001b[0;32mif\u001b[0m \u001b[0mword\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'bureaucrat'\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mword\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'bureaucrats'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-5-437a8c982553>\u001b[0m in \u001b[0;36mextract_sentences_with_word\u001b[0;34m(input_string, target_word)\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m     \u001b[0;31m# Find all matches of the pattern in the input string\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m     \u001b[0mmatches\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mre\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfindall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpattern\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_string\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mre\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mIGNORECASE\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0;31m# Filter out sentences that contain only escape sequences\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/re.py\u001b[0m in \u001b[0;36mfindall\u001b[0;34m(pattern, string, flags)\u001b[0m\n\u001b[1;32m    238\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    239\u001b[0m     Empty matches are included in the result.\"\"\"\n\u001b[0;32m--> 240\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_compile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpattern\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflags\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfindall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstring\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    241\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    242\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mfinditer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpattern\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstring\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflags\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","source":[],"metadata":{"id":"cOZjRd7FIxbN"},"execution_count":null,"outputs":[]}]}